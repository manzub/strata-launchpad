{"version":3,"file":"static/js/620.dc44b79c.chunk.js","mappings":"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","sources":["components/bootstrap/Option.js","components/bootstrap/forms/Input.js","components/bootstrap/forms/InputGroup.js","components/bootstrap/forms/Select.js","components/bootstrap/forms/Validation.js","components/bootstrap/forms/Textarea.js","pages/dashboard/Airdrop.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Options = ({ list }) => {\n\treturn list?.map((i) => (\n\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t<Option key={i.value} value={i.value} {...i}>\n\t\t\t{i.text || i.label}\n\t\t</Option>\n\t));\n};\nOptions.propTypes = {\n\tlist: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\ttext: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t}),\n\t),\n};\nOptions.defaultProps = {\n\tlist: null,\n};\n\nconst Option = ({ children, value, disabled, ariaLabelledby, ...props }) => {\n\treturn (\n\t\t<option\n\t\t\tvalue={value}\n\t\t\tdisabled={disabled}\n\t\t\taria-labelledby={ariaLabelledby || children}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}>\n\t\t\t{children}\n\t\t</option>\n\t);\n};\nOption.propTypes = {\n\tchildren: PropTypes.string.isRequired,\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tdisabled: PropTypes.bool,\n\tariaLabelledby: PropTypes.string,\n};\nOption.defaultProps = {\n\tvalue: null,\n\tdisabled: false,\n\tariaLabelledby: null,\n};\n\nexport default Option;\n","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport NumberFormat from 'react-number-format';\nimport InputMask from 'react-input-mask';\nimport classNames from 'classnames';\nimport Portal from '../../../layout/Portal/Portal';\nimport Validation from './Validation';\n\nconst Input = forwardRef(\n\t(\n\t\t{\n\t\t\ttype,\n\t\t\tid,\n\t\t\tname,\n\t\t\tclassName,\n\t\t\trequired,\n\t\t\tplaceholder,\n\t\t\tautoComplete,\n\t\t\tariaDescribedby,\n\t\t\tariaLabelledby,\n\t\t\tariaLabel,\n\t\t\tlist,\n\t\t\ttitle,\n\t\t\tsize,\n\t\t\tdisabled,\n\t\t\treadOnly,\n\t\t\tmultiple,\n\t\t\tvalue,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\tstep,\n\t\t\tisValid,\n\t\t\tisTouched,\n\t\t\tinvalidFeedback,\n\t\t\tvalidFeedback,\n\t\t\tisValidMessage,\n\t\t\tisTooltipFeedback,\n\t\t\tonBlur,\n\t\t\tonChange,\n\t\t\tonFocus,\n\t\t\tonInput,\n\t\t\tonInvalid,\n\t\t\tonSelect,\n\t\t\tcomponent,\n\t\t\t// InputMask & NumberFormat props\n\t\t\tmask,\n\t\t\t// NumberFormat props\n\t\t\tformat,\n\t\t\t// InputMask props\n\t\t\t...props\n\t\t},\n\t\tref,\n\t) => {\n\t\tconst _props = {\n\t\t\tid,\n\t\t\tname: name === null ? id : name,\n\t\t\ttype: !list ? type : null,\n\t\t\tclassName: classNames(\n\t\t\t\t{\n\t\t\t\t\t'form-control': readOnly !== 'plaintext' && type !== 'range',\n\t\t\t\t\t'form-range': type === 'range',\n\t\t\t\t\t'form-control-plaintext': readOnly === 'plaintext',\n\t\t\t\t\t'form-control-color': type === 'color',\n\t\t\t\t\t[`form-control-${size}`]: size,\n\t\t\t\t\t'is-invalid': !isValid && isTouched && invalidFeedback,\n\t\t\t\t\t'is-valid': !isValid && isTouched && !invalidFeedback,\n\t\t\t\t},\n\t\t\t\tclassName,\n\t\t\t),\n\t\t\trequired,\n\t\t\tplaceholder,\n\t\t\ttitle,\n\t\t\tlist: list ? `${id}-list` : null,\n\t\t\tdisabled,\n\t\t\treadOnly: !!readOnly,\n\t\t\tmultiple,\n\t\t\tautoComplete,\n\t\t\t'aria-describedby': ariaDescribedby,\n\t\t\t'aria-label': ariaLabel,\n\t\t\t'aria-labelledby': ariaLabelledby,\n\t\t\tvalue,\n\t\t\tmin,\n\t\t\tmax,\n\t\t\tstep,\n\t\t\tonBlur,\n\t\t\tonChange: readOnly ? null : onChange,\n\t\t\tonFocus,\n\t\t\tonInput,\n\t\t\tonInvalid,\n\t\t\tonSelect,\n\t\t\t...props,\n\t\t};\n\t\tconst _numberFormatProps = {\n\t\t\tmask,\n\t\t\tformat,\n\t\t\tonBlur: () => onBlur,\n\t\t\tonChange: readOnly ? null : () => onChange,\n\t\t\tonFocus: () => onFocus,\n\t\t\tonInput: () => onInput,\n\t\t\tonInvalid: () => onInvalid,\n\t\t\tonSelect: () => onSelect,\n\t\t};\n\t\tconst _maskProps = { mask };\n\n\t\tconst _list = list && (\n\t\t\t<Portal>\n\t\t\t\t<datalist id={`${id}-list`}>\n\t\t\t\t\t{list.map((option) => (\n\t\t\t\t\t\t<option key={option} aria-labelledby={option} value={option} />\n\t\t\t\t\t))}\n\t\t\t\t</datalist>\n\t\t\t</Portal>\n\t\t);\n\n\t\tconst _validation = isValidMessage && (\n\t\t\t<Validation\n\t\t\t\tisTouched={isTouched}\n\t\t\t\tinvalidFeedback={invalidFeedback}\n\t\t\t\tvalidFeedback={validFeedback}\n\t\t\t\tisTooltip={isTooltipFeedback}\n\t\t\t/>\n\t\t);\n\n\t\tif (component === 'NumberFormat' || format) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{/* eslint-disable-next-line react/jsx-props-no-spreading */}\n\t\t\t\t\t<NumberFormat ref={ref} {..._props} {..._numberFormatProps} />\n\t\t\t\t\t{_list}\n\t\t\t\t\t{_validation}\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\tif (component === 'InputMask' || mask) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{/* eslint-disable-next-line react/jsx-props-no-spreading */}\n\t\t\t\t\t<InputMask ref={ref} {..._props} {..._maskProps} />\n\t\t\t\t\t{_list}\n\t\t\t\t\t{_validation}\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{/* eslint-disable-next-line react/jsx-props-no-spreading */}\n\t\t\t\t<input ref={ref} {..._props} />\n\t\t\t\t{_list}\n\t\t\t\t{_validation}\n\t\t\t</>\n\t\t);\n\t},\n);\nInput.propTypes = {\n\tcomponent: PropTypes.oneOf(['NumberFormat', 'InputMask']),\n\ttype: PropTypes.oneOf([\n\t\t'text',\n\t\t'email',\n\t\t'password',\n\t\t'file',\n\t\t'color',\n\t\t'date',\n\t\t'datetime-local',\n\t\t'hidden',\n\t\t'month',\n\t\t'number',\n\t\t'range',\n\t\t'search',\n\t\t'tel',\n\t\t'time',\n\t\t'url',\n\t\t'week',\n\t]),\n\tid: PropTypes.string,\n\t/**\n\t * If the name value is left blank, the id value is assigned.\n\t */\n\tname: PropTypes.string,\n\tsize: PropTypes.oneOf(['lg', 'sm']),\n\tclassName: PropTypes.string,\n\trequired: PropTypes.bool,\n\tplaceholder: PropTypes.string,\n\t/**\n\t * The *title* global attribute contains text representing advisory information related to the element it belongs to.\n\t */\n\ttitle: PropTypes.string,\n\t/**\n\t * Contains pre-defined options for an *Input* component.\n\t */\n\tlist: PropTypes.arrayOf(PropTypes.string),\n\tautoComplete: PropTypes.string,\n\t/**\n\t * A *disabled* element isn't editable and isn't sent on submit.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * The multiple attribute works with the following input types: email, and file.\n\t */\n\tmultiple: PropTypes.bool,\n\t/**\n\t * A *readOnly* element is just not editable, but gets sent when the according *form* submits.\n\t */\n\treadOnly: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['plaintext'])]),\n\tariaDescribedby: PropTypes.string,\n\tariaLabelledby: PropTypes.string,\n\tariaLabel: PropTypes.string,\n\t/**\n\t * For formik ***`formik.values.ID_OR_NAME`***\n\t */\n\t// eslint-disable-next-line react/require-default-props\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n\tmin: PropTypes.number,\n\tmax: PropTypes.number,\n\tstep: PropTypes.number,\n\t/**\n\t * For formik ***`formik.touched.ID_OR_NAME`***\n\t */\n\tisTouched: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.isValid`***\n\t */\n\tisValid: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.errors.ID_OR_NAME`***\n\t */\n\tinvalidFeedback: PropTypes.string,\n\tvalidFeedback: PropTypes.string,\n\tisValidMessage: PropTypes.bool,\n\tisTooltipFeedback: PropTypes.bool,\n\t/**\n\t * Fires the moment that the element loses focus. For formik ***`formik.handleBlur`***\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Fires the moment when the value of the element is changed. For formik ***`formik.handleChange`***\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Fires the moment when the element gets focus\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Script to be run when an element gets user input\n\t */\n\tonInput: PropTypes.func,\n\t/**\n\t * Script to be run when an element is invalid\n\t */\n\tonInvalid: PropTypes.func,\n\t/**\n\t * Fires after some text has been selected in an element\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * More information, [react-input-mask](https://github.com/sanniassin/react-input-mask#react-input-mask).\n\t */\n\tmask: PropTypes.string,\n\t/**\n\t * More information, [react-number-format](https://github.com/s-yadav/react-number-format#readme).\n\t */\n\tformat: PropTypes.string,\n};\nInput.defaultProps = {\n\tcomponent: null,\n\ttype: 'text',\n\tid: null,\n\tname: null,\n\tsize: null,\n\tclassName: null,\n\trequired: false,\n\tplaceholder: null,\n\ttitle: null,\n\tlist: null,\n\tautoComplete: null,\n\tdisabled: false,\n\tmultiple: false,\n\treadOnly: false,\n\tariaDescribedby: null,\n\tariaLabelledby: null,\n\tariaLabel: null,\n\tvalue: undefined,\n\tmin: null,\n\tmax: null,\n\tstep: null,\n\tisTouched: false,\n\tisValid: false,\n\tinvalidFeedback: null,\n\tvalidFeedback: null,\n\tisValidMessage: true,\n\tisTooltipFeedback: false,\n\tonBlur: null,\n\tonChange: null,\n\tonFocus: null,\n\tonInput: null,\n\tonInvalid: null,\n\tonSelect: null,\n\tmask: null,\n\tformat: null,\n};\n\nexport default Input;\n","import React, { Children, cloneElement, forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport TagWrapper from '../../TagWrapper';\nimport Validation from './Validation';\n\nexport const InputGroupText = forwardRef(({ tag, id, className, children, ...props }, ref) => {\n\treturn (\n\t\t<TagWrapper\n\t\t\ttag={tag}\n\t\t\tref={ref}\n\t\t\tid={id}\n\t\t\tclassName={classNames('input-group-text', className)}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}>\n\t\t\t{children?.props?.type ? cloneElement(children, { isFormCheckInput: true }) : children}\n\t\t</TagWrapper>\n\t);\n});\nInputGroupText.propTypes = {\n\ttag: PropTypes.oneOf(['span', 'div', 'label']),\n\tchildren: PropTypes.node.isRequired,\n\tid: PropTypes.string,\n\tclassName: PropTypes.string,\n};\nInputGroupText.defaultProps = {\n\ttag: 'span',\n\tid: null,\n\tclassName: null,\n};\n\nconst InputGroup = forwardRef(({ id, className, children, isWrap, size, ...props }, ref) => {\n\tlet _isValid = false;\n\tlet _isTouched = false;\n\tlet _invalidFeedback = null;\n\tlet _validFeedback = null;\n\tlet _isTooltipFeedback = false;\n\n\tconst validClass = (child) => {\n\t\tfor (let i = 0; i < child?.length; i += 1) {\n\t\t\tif (child[i].props.isValid) {\n\t\t\t\t_isValid = true;\n\t\t\t}\n\t\t\tif (child[i].props.isTouched) {\n\t\t\t\t_isTouched = true;\n\t\t\t}\n\t\t\tif (child[i].props.invalidFeedback) {\n\t\t\t\t_invalidFeedback = child[i].props.invalidFeedback;\n\t\t\t}\n\t\t\tif (child[i].props.validFeedback) {\n\t\t\t\t_validFeedback = child[i].props.validFeedback;\n\t\t\t}\n\t\t\tif (child[i].props.isTooltipFeedback) {\n\t\t\t\t_isTooltipFeedback = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t};\n\tvalidClass(children);\n\n\treturn (\n\t\t<div\n\t\t\tref={ref}\n\t\t\tid={id}\n\t\t\tclassName={classNames(\n\t\t\t\t'input-group',\n\t\t\t\t{\n\t\t\t\t\t'flex-nowrap': !isWrap,\n\t\t\t\t\t[`input-group-${size}`]: size,\n\t\t\t\t\t'has-validation':\n\t\t\t\t\t\t(!_isValid && _isTouched && (_invalidFeedback || _validFeedback)) ||\n\t\t\t\t\t\t(_isValid && _validFeedback),\n\t\t\t\t},\n\t\t\t\tclassName,\n\t\t\t)}\n\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t{...props}>\n\t\t\t{Children.map(children, (item, index) =>\n\t\t\t\titem?.props?.isValidMessage\n\t\t\t\t\t? cloneElement(item, { key: index, isValidMessage: false })\n\t\t\t\t\t: cloneElement(item, { key: index }),\n\t\t\t)}\n\t\t\t<Validation\n\t\t\t\tisTouched={_isTouched}\n\t\t\t\tvalidFeedback={_validFeedback}\n\t\t\t\tinvalidFeedback={_invalidFeedback}\n\t\t\t\tisTooltip={_isTooltipFeedback}\n\t\t\t/>\n\t\t</div>\n\t);\n});\nInputGroup.propTypes = {\n\tchildren: PropTypes.node.isRequired,\n\tid: PropTypes.string,\n\tclassName: PropTypes.string,\n\t/**\n\t * Input groups wrap by default via wrap in order to accommodate custom form field validation within an input group. You may disable this with `isWrap={false}`.\n\t */\n\tisWrap: PropTypes.bool,\n\tsize: PropTypes.oneOf(['sm', 'lg']),\n};\nInputGroup.defaultProps = {\n\tid: null,\n\tclassName: null,\n\tisWrap: true,\n\tsize: null,\n};\n\nexport default InputGroup;\n","import React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Option, { Options } from '../Option';\nimport Validation from './Validation';\n\nconst Select = forwardRef(\n\t(\n\t\t{\n\t\t\tid,\n\t\t\tname,\n\t\t\tclassName,\n\t\t\tchildren,\n\t\t\trequired,\n\t\t\tplaceholder,\n\t\t\tariaDescribedby,\n\t\t\tariaLabelledby,\n\t\t\tariaLabel,\n\t\t\tlist,\n\t\t\tmultiple,\n\t\t\ttitle,\n\t\t\tsize,\n\t\t\tdisabled,\n\t\t\tvalue,\n\t\t\tdefaultValue,\n\t\t\tisValid,\n\t\t\tisTouched,\n\t\t\tinvalidFeedback,\n\t\t\tvalidFeedback,\n\t\t\tisValidMessage,\n\t\t\tisTooltipFeedback,\n\t\t\tonBlur,\n\t\t\tonChange,\n\t\t\tonFocus,\n\t\t\tonInput,\n\t\t\tonInvalid,\n\t\t\tonSelect,\n\t\t\t...props\n\t\t},\n\t\t// eslint-disable-next-line no-unused-vars\n\t\tref,\n\t) => {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<select\n\t\t\t\t\tref={ref}\n\t\t\t\t\tid={id}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'form-select',\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t[`form-select-${size}`]: size,\n\t\t\t\t\t\t\t'text-muted': value === '' && placeholder,\n\t\t\t\t\t\t\t'is-invalid': !isValid && isTouched && invalidFeedback,\n\t\t\t\t\t\t\t'is-valid': !isValid && isTouched && !invalidFeedback,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tname={name}\n\t\t\t\t\taria-label={ariaLabel}\n\t\t\t\t\taria-describedby={ariaDescribedby}\n\t\t\t\t\taria-labelledby={ariaLabelledby}\n\t\t\t\t\tmultiple={multiple}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\ttitle={title}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tdefaultValue={defaultValue}\n\t\t\t\t\trequired={required}\n\t\t\t\t\tonBlur={onBlur}\n\t\t\t\t\tonChange={onChange}\n\t\t\t\t\tonFocus={onFocus}\n\t\t\t\t\tonInput={onInput}\n\t\t\t\t\tonInvalid={onInvalid}\n\t\t\t\t\tonSelect={onSelect}\n\t\t\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t\t\t{...props}>\n\t\t\t\t\t{placeholder && (\n\t\t\t\t\t\t<Option value='' hidden>\n\t\t\t\t\t\t\t{placeholder}\n\t\t\t\t\t\t</Option>\n\t\t\t\t\t)}\n\t\t\t\t\t{children || <Options list={list} />}\n\t\t\t\t</select>\n\t\t\t\t{isValidMessage && (\n\t\t\t\t\t<Validation\n\t\t\t\t\t\tisTouched={isTouched}\n\t\t\t\t\t\tinvalidFeedback={invalidFeedback}\n\t\t\t\t\t\tvalidFeedback={validFeedback}\n\t\t\t\t\t\tisTooltip={isTooltipFeedback}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t},\n);\nSelect.propTypes = {\n\tid: PropTypes.string,\n\tclassName: PropTypes.string,\n\t/**\n\t * If the name value is left blank, the id value is assigned.\n\t */\n\tname: PropTypes.string,\n\tchildren: PropTypes.node,\n\tariaLabel: PropTypes.string.isRequired,\n\tplaceholder: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\tsize: PropTypes.oneOf(['lg', 'sm']),\n\tmultiple: PropTypes.bool,\n\t/**\n\t * A *disabled* element isn't editable and isn't sent on submit.\n\t */\n\tdisabled: PropTypes.bool,\n\trequired: PropTypes.bool,\n\tariaDescribedby: PropTypes.string,\n\tariaLabelledby: PropTypes.string,\n\ttitle: PropTypes.string,\n\t/**\n\t * For formik ***`formik.values.ID_OR_NAME`***\n\t */\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\tdefaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n\tlist: PropTypes.arrayOf(\n\t\tPropTypes.shape({\n\t\t\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\ttext: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t\tlabel: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n\t\t}),\n\t),\n\t/**\n\t * For formik ***`formik.touched.ID_OR_NAME`***\n\t */\n\tisTouched: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.isValid`***\n\t */\n\tisValid: PropTypes.bool,\n\t/**\n\t * For formik ***`formik.errors.ID_OR_NAME`***\n\t */\n\tinvalidFeedback: PropTypes.string,\n\tvalidFeedback: PropTypes.string,\n\tisValidMessage: PropTypes.bool,\n\tisTooltipFeedback: PropTypes.bool,\n\t/**\n\t * Fires the moment that the element loses focus. For formik ***`formik.handleBlur`***\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Fires the moment when the value of the element is changed. For formik ***`formik.handleChange`***\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Fires the moment when the element gets focus\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Script to be run when an element gets user input\n\t */\n\tonInput: PropTypes.func,\n\t/**\n\t * Script to be run when an element is invalid\n\t */\n\tonInvalid: PropTypes.func,\n\t/**\n\t * Fires after some text has been selected in an element\n\t */\n\tonSelect: PropTypes.func,\n\t/**\n\t * More information, [react-input-mask](https://github.com/sanniassin/react-input-mask#react-input-mask).\n\t */\n};\nSelect.defaultProps = {\n\tid: null,\n\tclassName: null,\n\tname: null,\n\tchildren: null,\n\tplaceholder: null,\n\tmultiple: false,\n\tsize: null,\n\tdisabled: false,\n\trequired: false,\n\tariaDescribedby: null,\n\tariaLabelledby: null,\n\ttitle: null,\n\tvalue: undefined,\n\tdefaultValue: undefined,\n\tlist: null,\n\tisTouched: false,\n\tisValid: false,\n\tinvalidFeedback: null,\n\tvalidFeedback: null,\n\tisValidMessage: true,\n\tisTooltipFeedback: false,\n\tonBlur: null,\n\tonChange: null,\n\tonFocus: null,\n\tonInput: null,\n\tonInvalid: null,\n\tonSelect: null,\n};\n\nexport default Select;\n","import React, { useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nconst Validation = ({ isTouched, invalidFeedback, validFeedback, isTooltip }) => {\n\tconst ref = useRef(null);\n\n\tuseEffect(() => {\n\t\tif (isTooltip) {\n\t\t\tfor (let i = 0; i < ref?.current?.parentNode.classList.length; i += 1) {\n\t\t\t\tif (['input-group'].includes(ref?.current?.parentNode.classList[i])) {\n\t\t\t\t\tref?.current?.parentNode.parentNode.classList.add('position-relative');\n\t\t\t\t} else {\n\t\t\t\t\tref?.current?.parentNode.classList.add('position-relative');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\tif (isTouched && invalidFeedback) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={classNames({\n\t\t\t\t\t'invalid-feedback': !isTooltip,\n\t\t\t\t\t'invalid-tooltip': isTooltip,\n\t\t\t\t})}>\n\t\t\t\t{invalidFeedback}\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t!invalidFeedback &&\n\t\tvalidFeedback && (\n\t\t\t<div\n\t\t\t\tref={ref}\n\t\t\t\tclassName={classNames({\n\t\t\t\t\t'valid-feedback': !isTooltip,\n\t\t\t\t\t'valid-tooltip': isTooltip,\n\t\t\t\t})}>\n\t\t\t\t{validFeedback}\n\t\t\t</div>\n\t\t)\n\t);\n};\nValidation.propTypes = {\n\tisTouched: PropTypes.bool,\n\tinvalidFeedback: PropTypes.string,\n\tvalidFeedback: PropTypes.string,\n\tisTooltip: PropTypes.bool,\n};\nValidation.defaultProps = {\n\tisTouched: false,\n\tinvalidFeedback: null,\n\tvalidFeedback: null,\n\tisTooltip: false,\n};\n\nexport default Validation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Validation from './Validation';\n\nconst Textarea = ({\n\tid,\n\tname,\n\tclassName,\n\trows,\n\tplaceholder,\n\tautoComplete,\n\tariaDescribedby,\n\tariaLabelledby,\n\tariaLabel,\n\ttitle,\n\tsize,\n\tdisabled,\n\treadOnly,\n\tvalue,\n\tisValid,\n\tisTouched,\n\tinvalidFeedback,\n\tvalidFeedback,\n\tisValidMessage,\n\tisTooltipFeedback,\n\tonBlur,\n\tonChange,\n\tonFocus,\n\tonInput,\n\tonInvalid,\n\tonSelect,\n\t...props\n}) => {\n\treturn (\n\t\t<>\n\t\t\t<textarea\n\t\t\t\tid={id}\n\t\t\t\tclassName={classNames(\n\t\t\t\t\t{\n\t\t\t\t\t\t'form-control': readOnly !== 'plaintext',\n\t\t\t\t\t\t'form-control-plaintext': readOnly === 'plaintext',\n\t\t\t\t\t\t[`form-control-${size}`]: size,\n\t\t\t\t\t\t'is-invalid': !isValid && isTouched && invalidFeedback,\n\t\t\t\t\t\t'is-valid': !isValid && isTouched && !invalidFeedback,\n\t\t\t\t\t},\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\trows={rows}\n\t\t\t\tname={name}\n\t\t\t\ttitle={title}\n\t\t\t\tdisabled={disabled}\n\t\t\t\treadOnly={!!readOnly}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tautoComplete={autoComplete}\n\t\t\t\taria-describedby={ariaDescribedby}\n\t\t\t\taria-label={ariaLabel}\n\t\t\t\taria-labelledby={ariaLabelledby}\n\t\t\t\tvalue={value}\n\t\t\t\tonBlur={onBlur}\n\t\t\t\tonChange={onChange}\n\t\t\t\tonFocus={onFocus}\n\t\t\t\tonInput={onInput}\n\t\t\t\tonInvalid={onInvalid}\n\t\t\t\tonSelect={onSelect}\n\t\t\t\t// eslint-disable-next-line react/jsx-props-no-spreading\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{isValidMessage && (\n\t\t\t\t<Validation\n\t\t\t\t\tisTouched={isTouched}\n\t\t\t\t\tinvalidFeedback={invalidFeedback}\n\t\t\t\t\tvalidFeedback={validFeedback}\n\t\t\t\t\tisTooltip={isTooltipFeedback}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\nTextarea.propTypes = {\n\tid: PropTypes.string,\n\tname: PropTypes.string,\n\tsize: PropTypes.oneOf(['lg', 'sm']),\n\tclassName: PropTypes.string,\n\trows: PropTypes.number,\n\tplaceholder: PropTypes.string,\n\tautoComplete: PropTypes.string,\n\tariaDescribedby: PropTypes.string,\n\tariaLabelledby: PropTypes.string,\n\tariaLabel: PropTypes.string,\n\ttitle: PropTypes.string,\n\t/**\n\t * A *disabled* element isn't editable and isn't sent on submit.\n\t */\n\tdisabled: PropTypes.bool,\n\t/**\n\t * A *readonly* element is just not editable, but gets sent when the according *form* submits.\n\t */\n\treadOnly: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['plaintext'])]),\n\t// eslint-disable-next-line react/require-default-props\n\tvalue: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n\tisTouched: PropTypes.bool,\n\tisValid: PropTypes.bool,\n\tinvalidFeedback: PropTypes.string,\n\tvalidFeedback: PropTypes.string,\n\tisValidMessage: PropTypes.bool,\n\tisTooltipFeedback: PropTypes.bool,\n\t/**\n\t * Fires the moment that the element loses focus\n\t */\n\tonBlur: PropTypes.func,\n\t/**\n\t * Fires the moment when the value of the element is changed\n\t */\n\tonChange: PropTypes.func,\n\t/**\n\t * Fires the moment when the element gets focus\n\t */\n\tonFocus: PropTypes.func,\n\t/**\n\t * Script to be run when an element gets user input\n\t */\n\tonInput: PropTypes.func,\n\t/**\n\t * Script to be run when an element is invalid\n\t */\n\tonInvalid: PropTypes.func,\n\t/**\n\t * Fires after some text has been selected in an element\n\t */\n\tonSelect: PropTypes.func,\n};\nTextarea.defaultProps = {\n\tid: null,\n\tname: null,\n\tsize: null,\n\tclassName: null,\n\trows: 3,\n\tplaceholder: null,\n\tautoComplete: null,\n\tariaDescribedby: null,\n\tariaLabelledby: null,\n\tariaLabel: null,\n\ttitle: null,\n\tdisabled: false,\n\treadOnly: false,\n\tvalue: undefined,\n\tisTouched: false,\n\tisValid: false,\n\tinvalidFeedback: null,\n\tvalidFeedback: null,\n\tisValidMessage: true,\n\tisTooltipFeedback: false,\n\tonBlur: null,\n\tonChange: null,\n\tonFocus: null,\n\tonInput: null,\n\tonInvalid: null,\n\tonSelect: null,\n};\n\nexport default Textarea;\n","import React, { useCallback, useState } from 'react';\nimport Button from '../../components/bootstrap/Button';\nimport Card, { CardBody, CardHeader, CardTitle } from '../../components/bootstrap/Card';\nimport Input from '../../components/bootstrap/forms/Input';\nimport Textarea from '../../components/bootstrap/forms/Textarea';\nimport InputGroup, { InputGroupText } from '../../components/bootstrap/forms/InputGroup';\nimport Select from '../../components/bootstrap/forms/Select';\nimport Option from '../../components/bootstrap/Option';\nimport Icon from '../../components/icon/Icon';\nimport Page from '../../layout/Page/Page';\nimport PageWrapper from '../../layout/PageWrapper/PageWrapper';\nimport { useSelector } from 'react-redux';\nimport bscScanApi from \"../../utils/bscScanApi\";\nimport { useToasts } from 'react-toast-notifications';\nimport Toasts from '../../components/bootstrap/Toasts';\nimport strataLyApi, { devaddress } from '../../utils/strataLaunchApi';\n\nconst creationFee = 0.001;\n\nconst Airdrop = () => {\n  const { metamask } = useSelector(state => state);\n  const { addToast } = useToasts();\n\n  const [form, updateForm] = useState({ airdroptype: 1, tokenaddress: '', tokensperuser: 0, _distrib: '', balance: 0 })\n  const [droppingToken, setToken] = useState(null)\n\n  const [isApproved, setApprovedState] = useState(null)\n  const [waitingAsync, setWaitingAsync] = useState(false)\n\n  const notify = useCallback(\n    (iconColor, message, title) => addToast(\n      <Toasts iconColor={iconColor} icon={'Warning'} title={title}>\n        <span>{message}</span>\n      </Toasts>,\n      { autoDismiss: false }\n    ), [addToast]\n  )\n\n  const clearAsync = () => setWaitingAsync(false)\n\n  const handleTokenInput = () => {\n    setToken(null)\n    setWaitingAsync(true)\n    if (metamask.web3) {\n      const { accounts, web3 } = metamask\n      let isAddress = web3.utils.isAddress(form.tokenaddress)\n\n      if(isAddress && form.tokenaddress !== (null && '')) {\n        try {\n          bscScanApi.fetchApi({ module: 'token', action: 'tokeninfo', contractaddress: form.tokenaddress }).then( async (response) => {\n            if(response.status === \"1\") {\n              const _token = response.result[0];\n              const responseData = await bscScanApi.fetchApi({ module: 'contract', action: 'getabi', address: form.tokenaddress })\n              if(responseData.status === \"1\") {\n                // abi functions\n                _token.contractabi = responseData.result\n                var contractABI = JSON.parse(responseData.result)\n                var MyContract = new web3.eth.Contract(contractABI, form.tokenaddress);\n                const balance = await MyContract.methods.balanceOf(accounts[0]).call();\n                let toStr = `${balance}`;\n                // TODO: use divisor instead\n                updateForm({ ...form, balance: toStr.substr(0, toStr.length - 18) })\n                setToken(_token)\n              } else throw new Error(responseData.result)\n            }\n          })\n        } catch (error) {\n          notify('danger', 'error occurred', 'Token Error')\n        } \n      } else notify('danger', 'Invalid address', 'Token Error')\n    }\n    setWaitingAsync(false)\n  }\n\n  const approveAirdrop = async () => {\n    // approve airdrop\n    setWaitingAsync(true);\n    const isEmptyChecks = ['', ' '] // use case to check if fields are empty or not\n    const expectedFields = 5\n    // check every single form field\n    if(Object.keys(form).length === expectedFields) {\n      let isValid = true\n      Object.entries(form).forEach(field => {\n        if (isEmptyChecks.includes(field[1])) {\n          isValid = false\n          notify('danger', `${field[0]} cannot be empty`, 'Airdrop error')\n        }\n      })\n\n      if(isValid && metamask.web3) {\n        const { accounts, web3 } = metamask\n\n        const distributionList = [];\n        let errorFound = 0;\n        let _distrib = form._distrib.split(\",\");\n        _distrib.length > 1 && _distrib.forEach((address, idx) => {\n          let x = address.trim();\n          if(x !== (null && '')) {\n            if(web3.utils.isAddress(x)) {\n              distributionList.push(x)\n            } else {\n              errorFound += 1;\n              notify('danger', `Invalid address #${idx+1}`, 'Airdrop error')\n            }\n          }\n        })\n\n        if(errorFound === 0 ) {\n          if(distributionList.length > 1) {\n            // pay creation fee\n            web3.eth.sendTransaction({ from: accounts[0], to: devaddress, value: web3.utils.toWei(`${creationFee}`, 'ether') }).then(async (reciept) => {\n              if (reciept && reciept.status === true) {\n                notify('warning','Confirmed creation fee, proceeding with airdrop', 'Create Presale')\n                // abi contract for the token to airdrop\n                var thisTokenContract = new web3.eth.Contract(JSON.parse(droppingToken.contractabi), form.tokenaddress);\n                const _contractaddress = '0x9DB269bf4ac28a029A2B3f0E814F53C9D75a67E2';\n                try {\n                  // set airdrop token\n                  const response = await strataLyApi.setTokenAddress({ tokenaddress: form.tokenaddress })\n                  if(response.status === 1) {\n                    const amountToApprove = distributionList.length * form.tokensperuser\n                    const value = parseInt(amountToApprove) + parseInt(form.tokensperuser)\n                    const approved = await thisTokenContract.methods.approve(_contractaddress, web3.utils.toWei(`${value}`, 'ether')).send({ from: accounts[0] })\n                    if(approved) {\n                      notify('success', response.message + ', transfer tokens to begin airdrop', 'Airdop Info')\n                      // transfer tokens\n                      await thisTokenContract.methods.transfer(_contractaddress, web3.utils.toWei(`${value}`, 'ether')).send({ from: accounts[0] })\n                      notify('success', 'Proceed to begin airdrop', 'Airdop Info')\n                      setApprovedState(distributionList);\n                      clearAsync();\n                    }\n                  } else {\n                    notify('danger', response.message, 'Airdrop error')\n                    clearAsync()\n                  }\n                  \n                } catch (error) {\n                  notify('danger', 'Error occurred while approving token, try again: '+error.message, 'Airdrop error')\n                  clearAsync()\n                }\n              } else clearAsync()\n            }).catch(error => {\n              notify('danger', 'Error occurred while approving token, try again: '+error.message, 'Airdrop error')\n              clearAsync()\n            })\n          } else {\n            notify('danger', 'all distribution list addresses are invalid', 'Airdrop error') \n            clearAsync()\n          }\n        } else clearAsync()\n      } else clearAsync()\n    }else {\n      notify('danger', `fill in all fields`, 'Airdrop error')\n      clearAsync()\n    }\n  }\n\n  const sliceToChunks = (arr, size) => {\n    const res = [];\n    for (let i = 0; i < arr.length; i += size) {\n        const chunk = arr.slice(i, i + size);\n        res.push(chunk);\n    }\n    return res;\n  }\n\n  const proceedAirdrop = async () => {\n    setWaitingAsync(true)\n    // proceed with airdrop\n    if(metamask) {\n      if(form.creatoremail) {\n        var distributionList = [];\n        if(isApproved.length > 200) {\n          distributionList = sliceToChunks(isApproved, 200);\n        } else distributionList.push(isApproved)\n\n        try {\n          const response = await strataLyApi.dropTokens({ distributionList, tokensperuser: form.tokensperuser, creatorEmail: form.creatoremail })\n          if(response.status === 1) {\n            notify('success', response.message, 'Airdrop Completed!')\n            clearAsync();\n          } else {\n            throw new Error(response.message)\n          }\n        } catch (error) {\n          notify('danger', error.message, 'Airdrop error')\n          clearAsync()\n        }\n      } else {\n        notify('danger', 'enter your email', 'Airdrop Error')\n        clearAsync()\n      }\n    } else clearAsync()\n  }\n\n  return (\n    <PageWrapper title='Airdrop Instantly'>\n      <Page container='fluid'>\n        <div className='row mt-5'>\n          <div className='col-md-8 offset-2'>\n            <Card>\n              <CardHeader>\n                <CardTitle tag='h4'>Airdrop your token to all your users instantly with the click of a button!</CardTitle>\n              </CardHeader>\n              <CardBody>\n                { !!metamask.accounts[0] ? (<>\n                  <div className='p-4' style={{border:'1px solid #e3e3e3',borderRadius:5}}>\n                    <Select onChange={(event) => updateForm({ ...form, airdroptype: event.target.value })} ariaLabel='Airdrop Type'>\n                      <Option value={1}>Airdrop Tokens</Option>\n                      <Option disabled value={2}>Airdrop BNB</Option>\n                    </Select>\n\n                    <div className='mt-5 instructions'>\n                      <h5>Airdrop Instructions</h5>\n                      <ul className='text-muted'>\n                        <li className='text-danger'>Ensure your token is verified</li>\n                        <li>Airdrop tokens to as many users as desired</li>\n                        <li>If you are running a sale make sure tokens are not airdropped until after!</li>\n                        <li>Enter your token address first</li>\n                        <li>Enter a list of users to airdrop followed by amount (comma separated)</li>\n                      </ul>\n                    </div>\n\n                    <h5 className='text-center'>Airdrop Fees: {creationFee} BNB</h5>\n                    <InputGroup>\n                      <Input \n                      type='text'\n                      disabled={waitingAsync}\n                      ariaLabel='tokenaddress' \n                      onChange={(event) => updateForm({ ...form, tokenaddress: event.target.value })}\n                      placeholder='Eg. 0x5bE6eC9a5d1EF8390d22342EDA90E2Fc6F1A9f7d' />\n                      <InputGroupText>\n                        <Button isDisable={waitingAsync} onClick={handleTokenInput}>\n                          { waitingAsync ? <Icon icon='MoreHoriz' /> : <Icon icon={'Search'} /> }\n                        </Button>\n                      </InputGroupText>\n                    </InputGroup>\n                    \n                    { droppingToken ? (<>\n                      <h6>Token Name: <strong className='text-secondary'>{ droppingToken.tokenName }</strong> </h6>\n                      <h6>Your Balance: <strong className='text-secondary'>{new Intl.NumberFormat().format(form.balance)}</strong> </h6>\n\n                      <Textarea \n                      onChange={(event) => updateForm({ ...form, _distrib: event.target.value })} \n                      className='mt-5' \n                      ariaLabel='Airdrop Addresses' \n                      placeholder='Enter Distribution List, seperate addresses by (,)' />\n                      <small className='text-danger'>For best results we recommend you do a maximum of 200 Addresses at a time!</small>\n                      <br />\n                      <small className='text-danger'>Always remove trailing whitespaces</small>\n\n                      <div className='mt-5'>\n                        <h5 className='text-center'>Tokens per user</h5>\n                        <InputGroup>\n                          <Input \n                          type='number' \n                          onChange={(event) => updateForm({ ...form, tokensperuser: event.target.value })}\n                          placeholder='0.0'\n                          ariaLabel='token' />\n                          <InputGroupText>{ droppingToken.tokenName }</InputGroupText>\n                        </InputGroup>\n                        <small className='text-center'>Total tokens being airdropped: <strong className='text-secondary'>{ form.tokensperuser !== '' ? parseInt(form.tokensperuser) * form._distrib.split(\",\").length : 0 }</strong></small>\n                      </div>\n\n                      { isApproved ? (<>\n                        <h5>Enter your email address to recieve an alert when the airdrop is done.</h5>\n                        <Input \n                        ariaLabel='email'\n                        type='email'\n                        placeholder='your email address'\n                        onChange={(event) => updateForm({ ...form, creatoremail: event.target.value })}\n                        />\n                      </>) : null }\n                    </>) : null }\n                  </div>\n                  <div className='mt-5 text-center'>\n                    { droppingToken ? (<>\n                      <Button onClick={approveAirdrop} isDisable={waitingAsync || !!isApproved} style={{marginRight:10}} rounded={0} color='primary'>{ waitingAsync ? 'loading...' : 'Approve' }</Button>\n                      <Button onClick={proceedAirdrop} isDisable={(waitingAsync || !isApproved)} rounded={0} color='primary'>{ !!isApproved && waitingAsync ? 'loading...' : 'Airdrop' }</Button>\n                    </>) : null }\n                  </div>\n                </>) : <>\n                  <Button style={{width:'100%'}} isLight isDisable rounded={0} color='warning' ><Icon icon='ArrowUpward' /> Connect Wallet to continue</Button>\n                </> }\n              </CardBody>\n            </Card>\n          </div>\n        </div>\n      </Page>\n    </PageWrapper>\n  )\n}\n\nexport default Airdrop;"],"names":["Options","list","map","i","Option","value","text","label","defaultProps","children","disabled","ariaLabelledby","props","Input","forwardRef","ref","type","id","name","className","required","placeholder","autoComplete","ariaDescribedby","ariaLabel","title","size","readOnly","multiple","min","max","step","isValid","isTouched","invalidFeedback","validFeedback","isValidMessage","isTooltipFeedback","onBlur","onChange","onFocus","onInput","onInvalid","onSelect","component","mask","format","_props","classNames","_numberFormatProps","_maskProps","_list","option","_validation","isTooltip","undefined","InputGroupText","tag","cloneElement","isFormCheckInput","InputGroup","isWrap","_isValid","_isTouched","_invalidFeedback","_validFeedback","_isTooltipFeedback","child","length","validClass","Children","item","index","key","Select","defaultValue","hidden","Validation","useRef","useEffect","current","parentNode","classList","includes","add","Textarea","rows","metamask","useSelector","state","addToast","useToasts","useState","airdroptype","tokenaddress","tokensperuser","_distrib","balance","form","updateForm","droppingToken","setToken","isApproved","setApprovedState","waitingAsync","setWaitingAsync","notify","useCallback","iconColor","message","Toasts","icon","autoDismiss","clearAsync","approveAirdrop","isEmptyChecks","Object","keys","entries","forEach","field","web3","accounts","distributionList","errorFound","split","address","idx","x","trim","utils","isAddress","push","eth","sendTransaction","from","to","devaddress","toWei","then","reciept","status","thisTokenContract","Contract","JSON","parse","contractabi","_contractaddress","strataLyApi","response","amountToApprove","parseInt","methods","approve","send","transfer","catch","error","sliceToChunks","arr","res","chunk","slice","proceedAirdrop","creatoremail","creatorEmail","Error","PageWrapper","Page","container","Card","style","border","borderRadius","event","target","Button","isDisable","onClick","bscScanApi","module","action","contractaddress","_token","result","responseData","contractABI","MyContract","balanceOf","call","toStr","substr","Icon","tokenName","Intl","NumberFormat","marginRight","rounded","color","width","isLight"],"sourceRoot":""}